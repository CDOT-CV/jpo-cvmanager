version: '3.9'
services:
  conflictmonitor:
    image: usdotjpoode/jpo-conflictmonitor:release_1.2.0
    restart: always
    ports:
      - '8082:8082'
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      KAFKA_BROKER_IP: ${KAFKA_BROKER_IP}
      DB_HOST_IP: ${DB_HOST_IP}
    healthcheck:
      test: ['CMD', 'java', '-version']
      interval: 10s
      timeout: 10s
      retries: 20
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    deploy:
      resources:
        limits:
          memory: 3G

  conflictvisualizer-api:
    image: us-central1-docker.pkg.dev/cdot-oim-cv-dev/jpo-conflictvisualizer-api-cvmanager/jpo-conflictvisualizer-api-cvmanager:v1.0.0
    build:
      context: api
      dockerfile: Dockerfile
    ports:
      - '8089:8081'
    restart: always
    environment:
      AUTH_SERVER_URL: ${AUTH_SERVER_URL}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      DB_HOST_IP: ${DB_HOST_IP}
      DB_HOST_PORT: ${DB_HOST_PORT}
      SPRING_KAFKA_BOOTSTRAPSERVERS: ${KAFKA_BROKER_IP}:${KAFKA_BROKER_PORT}
      CM_SERVER_URL: ${CM_SERVER_URL}
      load: 'false'
      #KAFKA_BROKER_IP: ${KAFKA_BROKER_IP}
      #KAFKA_BROKER_PORT: ${KAFKA_BROKER_PORT}
    logging:
      options:
        max-size: '10m'
        max-file: '5'

  mongodb_container:
    image: mongo:6
    container_name: jpo-conflictmonitor-mongodb-container
    restart: always
    environment:
      - MONGO_REPLICA_SET_NAME=rs0
      - DB_HOST_IP=${DB_HOST_IP}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - CM_MONGO_CONNECTOR_USERNAME=${CM_MONGO_CONNECTOR_USERNAME}
      - CM_MONGO_CONNECTOR_PASSWORD=${CM_MONGO_CONNECTOR_PASSWORD}
      - CM_MONGO_API_USERNAME=${CM_MONGO_API_USERNAME}
      - CM_MONGO_API_PASSWORD=${CM_MONGO_API_PASSWORD}
      - CM_MONGO_USER_USERNAME=${CM_MONGO_USER_USERNAME}
      - CM_MONGO_USER_PASSWORD=${CM_MONGO_USER_PASSWORD}
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data_container:/data/db
      - ./docker/mongo/keyfile.txt:/data/keyfile.txt
      - ./docker/mongo/a_init_replicas.js:/docker-entrypoint-initdb.d/a_init_replicas.js
      - ./docker/mongo/b_create_indexes.js:/docker-entrypoint-initdb.d/b_create_indexes.js
    healthcheck:
      test: |
        test $$(mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD}  --quiet --eval "try { rs.initiate({ _id: 'rs0', members: [{ _id: 0, host: '${DB_HOST_IP}' }] }).ok } catch (_) { rs.status().ok }") -eq 1
      interval: 10s
      start_period: 30s
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/keyfile.txt
        chown 999:999 /data/keyfile.txt
        exec docker-entrypoint.sh $$@

    command: ['mongod', '--replSet', 'rs0', '--bind_ip_all', '--keyFile', '/data/keyfile.txt']
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    deploy:
      resources:
        limits:
          memory: 3G

  connect:
    image: cp-kafka-connect:6.1.9
    build:
      context: ./docker/connect
      dockerfile: Dockerfile
    container_name: jpo-conflictmonitor-kafka-connect
    restart: always
    ports:
      - '8083:8083'
    depends_on:
      mongodb_container:
        condition: service_healthy
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_IP}
      DB_HOST_IP: ${DB_HOST_IP}
      CONNECT_BOOTSTRAP_SERVERS: ${KAFKA_BROKER_IP}:9092
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: CmConnectConfigs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_CLEANUP_POLICY: compact
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: CmConnectOffsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_CLEANUP_POLICY: compact
      CONNECT_STATUS_STORAGE_TOPIC: CmConnectStatus
      CONNECT_STATUS_STORAGE_CLEANUP_POLICY: compact
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      CONNECT_LOG4J_LOGGERS: 'org.apache.kafka.connect.runtime.rest=ERROR,org.reflections=ERROR,com.mongodb.kafka=ERROR'
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CM_MONGO_CONNECTOR_USERNAME: ${CM_MONGO_CONNECTOR_USERNAME}
      CM_MONGO_CONNECTOR_PASSWORD: ${CM_MONGO_CONNECTOR_PASSWORD}
    logging:
      options:
        max-size: '10m'
        max-file: '5'
    command:
      - bash
      - -c
      - |
        /etc/confluent/docker/run & 
        echo "Waiting for Kafka Connect to start listening on kafka-connect ❳"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://${KAFKA_CONNECT_IP}:8083/connectors) -eq 000 ] ; do 
          echo -e $$(date) " Kafka Connect listener HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://${KAFKA_CONNECT_IP}:8083/connectors) " (waiting for 200)"
          sleep 5
        done
        sleep 10
        echo -e "\n--\n+> Creating Kafka Connect MongoDB sink"
        bash /scripts/connect_start.sh "mongodb://${CM_MONGO_CONNECTOR_USERNAME}:${CM_MONGO_CONNECTOR_USERNAME}@${DOCKER_HOST_IP}:27017/?authMechanism=DEFAULT&authSource=ConflictMonitor&replicaSet=rs0"
        sleep infinity
    deploy:
      resources:
        limits:
          memory: 3G

volumes:
  mongodb_data_container:
