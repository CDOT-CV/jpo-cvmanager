# K8s ManagedCertificate for using SSL/TLS with a domain
# Domain and DNS forwarding to the Ingress endpoint must be configured
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: cv-manager-keycloak-managed-cert
spec:
  domains:
    - '{{ .Values.cvManager.keycloakDomain }}'
---
# K8s FrontendConfig for applying SSL certificate to Ingress
# Requires 'cv-manager-kc-ssl-policy' SSL policy to exist
apiVersion: networking.gke.io/v1beta1
kind: FrontendConfig
metadata:
  name: cv-manager-keycloak-frontend
  labels:
    app: cv-manager-keycloak
spec:
  redirectToHttps:
    enabled: true
  sslPolicy: cv-manager-kc-ssl-policy
---
# NodePort to expose KeyCloak web application
apiVersion: v1
kind: Service
metadata:
  name: cv-manager-keycloak-service-internal
  labels:
    app: cv-manager-keycloak
spec:
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: cv-manager-keycloak
  type: NodePort
---
# External HTTP/HTTPS Ingress to internal NodePort
# Requires 'cv-manager-kc-ip' as a global static external IP to be reserved
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cv-manager-keycloak-ingress
  labels:
    app: cv-manager-keycloak
  annotations:
    kubernetes.io/ingress.regional-static-ip-name: 'cv-manager-kc-ip'
    networking.gke.io/managed-certificates: 'cv-manager-keycloak-managed-cert'
    networking.gke.io/v1beta1.FrontendConfig: 'cv-manager-keycloak-frontend'
spec:
  defaultBackend:
    service:
      name: cv-manager-keycloak-service-internal
      port:
        number: 80
---
# Limits the number of pods that are down simultaneously
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: cv-manager-keycloak-pdb
spec:
  selector:
    matchLabels:
      app: cv-manager-keycloak
  maxUnavailable: 1
---
apiVersion: 'apps/v1'
kind: 'StatefulSet'
metadata:
  name: cv-manager-keycloak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cv-manager-keycloak
  template:
    metadata:
      labels:
        app: cv-manager-keycloak
    spec:
      containers:
        - name: cv-manager-keycloak
          imagePullPolicy: Always
          image: '{{ .Values.images.jpoode_cv_manager_keycloak.repository }}:{{ .Values.images.jpoode_cv_manager_keycloak.tag }}'
          resources:
            requests:
              memory: { { $.Values.resources.jpoode_cv_manager_keycloak.memory } }
              cpu: { { $.Values.resources.jpoode_cv_manager_keycloak.cpu } }
            limits:
              memory: { { $.Values.resources.jpoode_cv_manager_keycloak.memory } }
              cpu: { { $.Values.resources.jpoode_cv_manager_keycloak.cpu } }
          args: ['start-dev', '--log-level="DEBUG"', '--import-realm', '--proxy=edge']
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: KEYCLOAK_ADMIN
              value:
            - name: KEYCLOAK_ADMIN_PASSWORD
              value:
            - name: WEBAPP_ORIGIN
              value: ''
            - name: KC_HEALTH_ENABLED
              value: 'true'
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL
              value: ''
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgres_username
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: postgres_password
            - name: KC_HOSTNAME
              value: ''
            - name: KEYCLOAK_API_CLIENT_SECRET_KEY
              value: ''
            - name: GOOGLE_CLIENT_ID
              value: ''
            - name: GOOGLE_CLIENT_SECRET
              value: ''
          tty: true
          stdin: true
